##############################################################################################
#  Copyright Walmart Inc. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# create build directory
- name: Create build directory if it does not exist
  file:
    path: "{{ build_path }}"
    state: directory

# Set node_list to empty
- name: Set node_list to empty
  set_fact:
    node_list: []

# This task fetch (org,node) pairs for each validating node present in all organizations of the network
- name: Fetching data of validator nodes in the network from network.yaml
  include_tasks: node_data.yaml
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org

# This tasks checks the crypto material in the vault
- name: Get crypto from vault
  include_tasks: check_vault.yaml
  vars:
    component_ns: "{{ org.name | lower }}-bes"
    vault: "{{ org.vault }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org

# This task creates the genesis.json file from the template
- name: Create genesis.json
  template:
    src: "{{ network.config.consensus }}GenesisFile.tpl"
    dest: "{{ build_path }}/crypto/genesis.json"
  vars:
    chain_id: "{{ network.config.chain_id | default(2018) | int }}"
  when:
   - network.permissioning.enabled is not defined or not (network.permissioning.enabled | bool)

# This task creates the genesis.json file with permissioning details from the template
- name: Create genesis.json
  template:
    src: "{{ network.config.consensus }}PermissionGenesisFile.tpl"
    dest: "{{ build_path }}/crypto/genesis.json"
  vars:
    chain_id: "{{ network.config.chain_id | default(2018) | int }}"
  when:
    - network.permissioning.enabled is defined  
    - network.permissioning.enabled | bool

# This task displays the genesis file content
- name: Display genesis file contents
  debug:
    msg: "The genesis file is: {{ lookup('file', '{{ playbook_dir }}/build/crypto/genesis.json') }}"
    verbosity: 2

# This file stores the address of the validator nodes
- name: Touch file to store information for validators
  file:
    path: "{{ build_path }}/validatorinfo"
    state: touch

# This file is used by the besu binary to generate the extra data information
- name: Touch toEncode.json file
  file:
    path: "{{ build_path }}/toEncode.json"
    state: touch

# Create a new genesis file with updated extradata
- name: Touch modified genesis file
  file:
    path: "{{ build_path }}/crypto/newGenesis.json"
    state: touch

# Create the validator address array
- name: Get the node data
  shell: |
    echo "\"$(cat {{ build_path }}/crypto/{{ item[1].org }}/{{ item[1].node }}/data/nodeAddress)\"" >> {{ build_path }}/validatorinfo
  with_indexed_items: "{{ node_list }}"
  when:
    - item[1].type == "validator"

# This task creates the bin directory, if it doesn't exist, for storing the besu binary
- name: Create bin directory
  file:
    path: "{{ bin_install_dir }}/besu/besu-{{ network.version }}"
    state: directory

# Check if besu binary already exists
- name: check besu binary
  stat:
    path: "{{ bin_install_dir }}/besu/besu-{{ network.version }}/besu"
  register: besu_stat_result

# Create a temporary directory to download and extract besu tar
- name: register temporary directory
  tempfile:
    state: directory
  register: tmp_directory
  when: besu_stat_result.stat.exists == False

# This task fetches the besu tar file from the mentioned URL
- name: "Getting the besu binary tar"
  get_url:
    url: https://hyperledger.jfrog.io/artifactory/besu-binaries/besu/{{ network.version }}/besu-{{ network.version }}.zip
    dest: "{{ tmp_directory.path }}"
  when: besu_stat_result.stat.exists == False

# This task unzips the above downloaded tar file
- name: "Unziping the downloaded file"
  unarchive:
    src: "{{ tmp_directory.path }}/besu-{{ network.version }}.zip"
    dest: "{{ tmp_directory.path }}"
  when: besu_stat_result.stat.exists == False

# This task extracts the besu binary and place it at appropriate path
- name: "Moving the besu from the extracted folder and place in it path"
  copy:
    src: "{{ tmp_directory.path }}/besu-{{ network.version }}/bin/besu"
    dest: "{{ bin_install_dir }}/besu/besu-{{ network.version }}"
    mode: 0755
  when: besu_stat_result.stat.exists == False

# This task extracts the supporting besu.bat and place it at appropriate path
- name: "Moving the besu dependencies from the extracted folder and place in it path"
  copy:
    src: "{{ tmp_directory.path }}/besu-{{ network.version }}/lib"
    dest: "{{ bin_install_dir }}/besu"
    mode: 0755
  when: besu_stat_result.stat.exists == False

# This task generates the extraData field for and adds to the genenis 
- name: Generate extraData 
  include_tasks: generate_extraData.yaml

# This task writes the genesis base64 data to the file
- name: write the genesis file
  copy:
    content: "{{ genesis }}"
    dest: "{{ network.config.genesis }}"
  vars:
    genesis: "{{ lookup('file', '{{ build_path }}/crypto/newGenesis.json') | b64encode }}"

# This tasks copy the genesis to the vault
- name: Copy the crypto material to Vault
  include_tasks: add_to_vault.yaml
  vars:
    component_ns: "{{ org.name | lower }}-bes"
    vault: "{{ org.vault }}"
    genesis: "{{ lookup('file', '{{ build_path }}/crypto/newGenesis.json') | b64encode }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org
