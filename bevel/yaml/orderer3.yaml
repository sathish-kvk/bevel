---
# Source: hlf-ordnode/templates/secret--orderer0-admin.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orderer3-admin
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
type: Opaque
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM3RENDQXBLZ0F3SUJBZ0lVWDBGdVFEaHoySEUvb2I1SHNKODFiTkt1aVBrd0NnWUlLb1pJemowRUF3SXcKYlRFTE1Ba0dBMVVFQmhNQ1JWTXhFVEFQQmdOVkJBY1RDRUZzYVdOaGJuUmxNUkV3RHdZRFZRUUpFd2hCYkdsagpZVzUwWlRFWk1CY0dBMVVFQ2hNUVMzVnVaeUJHZFNCVGIyWjBkMkZ5WlRFTk1Bc0dBMVVFQ3hNRVZHVmphREVPCk1Bd0dBMVVFQXhNRmRHeHpZMkV3SGhjTk1qTXhNVEEzTURjd09ERXhXaGNOTWpReE1UQTNNRGN3T1RBd1dqQWsKTVJBd0RnWURWUVFMRXdkdmNtUmxjbVZ5TVJBd0RnWURWUVFERXdkdmNtUmxjbVZ5TUZrd0V3WUhLb1pJemowQwpBUVlJS29aSXpqMERBUWNEUWdBRVdBeWxBRjQwOHV0OTBhQ2dac3A2NUpZRWIwVzRQVFNpU01lSURwTVU5czROCkd6ZVp5dFhCeFVWS0J3WFpxL0VMOE0rTzRHSGR5OW5OZi9sZzJLNGNycU9DQVZjd2dnRlRNQTRHQTFVZER3RUIKL3dRRUF3SURxREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBZEJnTlZIUTRFRmdRVXoxbGJpbVd5ejlQY0k1aU9XcTF5TXFLam91b3dLd1lEVlIwakJDUXdJb0FnCmg4aytwbnJ5Y3NkenZCbVBXL2FsU2RuVmNiSzgwZndCUUJ5UlpjRWEvZG93YXdZRFZSMFJCR1F3WW9JSmJHOWoKWVd4b2IzTjBnZ2h2Y21SbGNtVnlNNElWYjNKa1pYSmxjak11WlhKcFkzTnpiMjR0Ym1WMGdpaHZjbVJsY21WeQpNeTV2Y21jeGNISnZlSGt1Y0dodlpXNXBlR0pzYjJOclkyaGhhVzR1WTI5dGh3Ui9BQUFCaHdRS1JqQUtNRnNHCkNDb0RCQVVHQndnQkJFOTdJbUYwZEhKeklqcDdJbWhtTGtGbVptbHNhV0YwYVc5dUlqb2lJaXdpYUdZdVJXNXkKYjJ4c2JXVnVkRWxFSWpvaWIzSmtaWEpsY2lJc0ltaG1MbFI1Y0dVaU9pSnZjbVJsY21WeUluMTlNQW9HQ0NxRwpTTTQ5QkFNQ0EwZ0FNRVVDSVFDZDZFVDVFNkpoUGdtbHZUeWt3ZFB2SXRuaDg2b2xKOGpwVkRJNkplY1IrUUlnClVJVHFlclZaSmhxU2lBOUdOL0pxNk1ZOFAwT2c3N3VBdzJIcWwyVGdkMGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ3o4eDJENm1DMGRvOG52SGYKR0pmcndXM0hWVHJycEhodU1ySDJ1YkVuMmRDaFJBTkNBQVJZREtVQVhqVHk2MzNSb0tCbXlucmtsZ1J2UmJnOQpOS0pJeDRnT2t4VDJ6ZzBiTjVuSzFjSEZSVW9IQmRtcjhRdnd6NDdnWWQzTDJjMS8rV0RZcmh5dQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg=="
  cacert.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNSakNDQWV5Z0F3SUJBZ0lSQU0vYmJDN1k2bFIyMU8rekJseENJTHN3Q2dZSUtvWkl6ajBFQXdJd2JURUwKTUFrR0ExVUVCaE1DUlZNeEVUQVBCZ05WQkFjVENFRnNhV05oYm5SbE1SRXdEd1lEVlFRSkV3aEJiR2xqWVc1MApaVEVaTUJjR0ExVUVDaE1RUzNWdVp5QkdkU0JUYjJaMGQyRnlaVEVOTUFzR0ExVUVDeE1FVkdWamFERU9NQXdHCkExVUVBeE1GZEd4elkyRXdIaGNOTWpNeE1UQTNNRGN3T0RFeFdoY05Nek14TVRBNE1EY3dPREV4V2pCdE1Rc3cKQ1FZRFZRUUdFd0pGVXpFUk1BOEdBMVVFQnhNSVFXeHBZMkZ1ZEdVeEVUQVBCZ05WQkFrVENFRnNhV05oYm5SbApNUmt3RndZRFZRUUtFeEJMZFc1bklFWjFJRk52Wm5SM1lYSmxNUTB3Q3dZRFZRUUxFd1JVWldOb01RNHdEQVlEClZRUURFd1YwYkhOallUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJLd0Q5RWdsQlpwVU1STVIKYWl6RzYxOXEyaXBHV3hmcUNGVnRjN3FUY3FSL1MrbHZ4WHVSR2VZOGVPczkvUzVmTUF6aWxWUi9kZjhZOFV4KwpiQlBIK1JDamJUQnJNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJCkt3WUJCUVVIQXdFd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBcEJnTlZIUTRFSWdRZ2g4aytwbnJ5Y3NkenZCbVAKVy9hbFNkblZjYks4MGZ3QlFCeVJaY0VhL2Rvd0NnWUlLb1pJemowRUF3SURTQUF3UlFJZ1ltWFVSenRBcGx3dQp1MG5ITVorU281Y0ZzemxJSGNjUFNmYnpySEhiMDNVQ0lRQ3U4eFltMXI5YjFPT2VpZGZRS3ZWdHVZSmk3K3o4CmlJeWFLQzFsNGplZFFBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  clientcacert.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNSakNDQWV5Z0F3SUJBZ0lSQU0vYmJDN1k2bFIyMU8rekJseENJTHN3Q2dZSUtvWkl6ajBFQXdJd2JURUwKTUFrR0ExVUVCaE1DUlZNeEVUQVBCZ05WQkFjVENFRnNhV05oYm5SbE1SRXdEd1lEVlFRSkV3aEJiR2xqWVc1MApaVEVaTUJjR0ExVUVDaE1RUzNWdVp5QkdkU0JUYjJaMGQyRnlaVEVOTUFzR0ExVUVDeE1FVkdWamFERU9NQXdHCkExVUVBeE1GZEd4elkyRXdIaGNOTWpNeE1UQTNNRGN3T0RFeFdoY05Nek14TVRBNE1EY3dPREV4V2pCdE1Rc3cKQ1FZRFZRUUdFd0pGVXpFUk1BOEdBMVVFQnhNSVFXeHBZMkZ1ZEdVeEVUQVBCZ05WQkFrVENFRnNhV05oYm5SbApNUmt3RndZRFZRUUtFeEJMZFc1bklFWjFJRk52Wm5SM1lYSmxNUTB3Q3dZRFZRUUxFd1JVWldOb01RNHdEQVlEClZRUURFd1YwYkhOallUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJLd0Q5RWdsQlpwVU1STVIKYWl6RzYxOXEyaXBHV3hmcUNGVnRjN3FUY3FSL1MrbHZ4WHVSR2VZOGVPczkvUzVmTUF6aWxWUi9kZjhZOFV4KwpiQlBIK1JDamJUQnJNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJCkt3WUJCUVVIQXdFd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBcEJnTlZIUTRFSWdRZ2g4aytwbnJ5Y3NkenZCbVAKVy9hbFNkblZjYks4MGZ3QlFCeVJaY0VhL2Rvd0NnWUlLb1pJemowRUF3SURTQUF3UlFJZ1ltWFVSenRBcGx3dQp1MG5ITVorU281Y0ZzemxJSGNjUFNmYnpySEhiMDNVQ0lRQ3U4eFltMXI5YjFPT2VpZGZRS3ZWdHVZSmk3K3o4CmlJeWFLQzFsNGplZFFBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: hlf-ordnode/templates/secret--orderer0-idcert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orderer3-idcert
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
type: Opaque
data:
  cert.pem: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNXakNDQWdHZ0F3SUJBZ0lVUWNZS2VKVEc4ZzNOQm04cmxyeGtJZmd2OHVrd0NnWUlLb1pJemowRUF3SXcKYWpFTE1Ba0dBMVVFQmhNQ1JWTXhFVEFQQmdOVkJBY1RDRUZzYVdOaGJuUmxNUkV3RHdZRFZRUUpFd2hCYkdsagpZVzUwWlRFWk1CY0dBMVVFQ2hNUVMzVnVaeUJHZFNCVGIyWjBkMkZ5WlRFTk1Bc0dBMVVFQ3hNRVZHVmphREVMCk1Ba0dBMVVFQXhNQ1kyRXdIaGNOTWpNeE1UQTNNRGN3T0RFeFdoY05NalF4TVRBM01EY3dPVEF3V2pBa01SQXcKRGdZRFZRUUxFd2R2Y21SbGNtVnlNUkF3RGdZRFZRUURFd2R2Y21SbGNtVnlNRmt3RXdZSEtvWkl6ajBDQVFZSQpLb1pJemowREFRY0RRZ0FFZ0JjdHREZ0x2RWhxRFpybVk0cEFqWlJrSmNWWWloaHJ6UE9DTzFIemZnMnR6SXhrCkRJYk9acWFEUXBBM21MNm1UWXpPcFVNajNpWUZYTWtHL09QSFpxT0J5akNCeHpBT0JnTlZIUThCQWY4RUJBTUMKQjRBd0RBWURWUjBUQVFIL0JBSXdBREFkQmdOVkhRNEVGZ1FVTjh4QmdKS01Na2Myb0ZFVDFSR2huekx4UkxJdwpLd1lEVlIwakJDUXdJb0FnQVdka2krQkhEd1RweDROZEwrUjA2YmRSTHFzM21seHJCb2JQWnBEaWs0QXdXd1lJCktnTUVCUVlIQ0FFRVQzc2lZWFIwY25NaU9uc2lhR1l1UVdabWFXeHBZWFJwYjI0aU9pSWlMQ0pvWmk1RmJuSnYKYkd4dFpXNTBTVVFpT2lKdmNtUmxjbVZ5SWl3aWFHWXVWSGx3WlNJNkltOXlaR1Z5WlhJaWZYMHdDZ1lJS29aSQp6ajBFQXdJRFJ3QXdSQUlnQllqWWpyOGpjemM1OC9mc2xrbHJqWTc4ME91dG5GYk5YS3ZWc3JDdjlwSUNJQ2dGCmxTcktEbXU4MkxKY1pGWkFKdHpnV3ZsR0RWc2xSMHdUbmJNMld4UmEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: hlf-ordnode/templates/secret--orderer0-idkey.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orderer3-idkey
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
type: Opaque
data:
  key.pem: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ1h3cDBNbEJTaG13d3lUZCsKbkdqOVlEK3lzeWF6cTVDMGZHNitBcGNFY0h1aFJBTkNBQVNBRnkyME9BdThTR29ObXVaamlrQ05sR1FseFZpSwpHR3ZNODRJN1VmTitEYTNNakdRTWhzNW1wb05Da0RlWXZxWk5qTTZsUXlQZUpnVmN5UWI4NDhkbQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg=="
---
# Source: hlf-ordnode/templates/secret--orderer0-tls.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orderer3-tls
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
type: Opaque
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2ekNDQXBLZ0F3SUJBZ0lVRmNGNFZlejBHM0I1U01PREhLZFk5dlRqTkhJd0NnWUlLb1pJemowRUF3SXcKYlRFTE1Ba0dBMVVFQmhNQ1JWTXhFVEFQQmdOVkJBY1RDRUZzYVdOaGJuUmxNUkV3RHdZRFZRUUpFd2hCYkdsagpZVzUwWlRFWk1CY0dBMVVFQ2hNUVMzVnVaeUJHZFNCVGIyWjBkMkZ5WlRFTk1Bc0dBMVVFQ3hNRVZHVmphREVPCk1Bd0dBMVVFQXhNRmRHeHpZMkV3SGhjTk1qTXhNVEEzTURjd09ERXhXaGNOTWpReE1UQTNNRGN3T1RBd1dqQWsKTVJBd0RnWURWUVFMRXdkdmNtUmxjbVZ5TVJBd0RnWURWUVFERXdkdmNtUmxjbVZ5TUZrd0V3WUhLb1pJemowQwpBUVlJS29aSXpqMERBUWNEUWdBRTlicXNZK0JaQllQaERTV3Z6Wm96cS93aEZVTlZvVXpLUTVRNmFyZ210SytlCnRGWWF0Z1lSUjh5Y1ZaazF2YjBrUzJlSkFaQ3dKd0Y3eUZ3RG9iaXNPNk9DQVZjd2dnRlRNQTRHQTFVZER3RUIKL3dRRUF3SURxREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBZEJnTlZIUTRFRmdRVTVIOWo2dk5hMXcyYW91Q1R6YzM4ZTdMWEtuSXdLd1lEVlIwakJDUXdJb0FnCmg4aytwbnJ5Y3NkenZCbVBXL2FsU2RuVmNiSzgwZndCUUJ5UlpjRWEvZG93YXdZRFZSMFJCR1F3WW9JSmJHOWoKWVd4b2IzTjBnZ2h2Y21SbGNtVnlNNElWYjNKa1pYSmxjak11WlhKcFkzTnpiMjR0Ym1WMGdpaHZjbVJsY21WeQpNeTV2Y21jeGNISnZlSGt1Y0dodlpXNXBlR0pzYjJOclkyaGhhVzR1WTI5dGh3Ui9BQUFCaHdRS1JqQUtNRnNHCkNDb0RCQVVHQndnQkJFOTdJbUYwZEhKeklqcDdJbWhtTGtGbVptbHNhV0YwYVc5dUlqb2lJaXdpYUdZdVJXNXkKYjJ4c2JXVnVkRWxFSWpvaWIzSmtaWEpsY2lJc0ltaG1MbFI1Y0dVaU9pSnZjbVJsY21WeUluMTlNQW9HQ0NxRwpTTTQ5QkFNQ0EwY0FNRVFDSUZkcmRwWUFnUEpDT1B1YnVJVHAxdm9KSGM0WW14QVZaM1dFQi9kOFVDRDJBaUJPCkFxYzVpZDkxWHE4ZVl1aGpmZ1A1cithVXJOZE5ZeXhUdHJTZ1RZZTM4Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ012Zko3N1JiekFIYW0waVoKNXBTRWlYekVXKy9obWpJLy9EdUM4WmhVQ2p1aFJBTkNBQVQxdXF4ajRGa0ZnK0VOSmEvTm1qT3IvQ0VWUTFXaApUTXBEbERwcXVDYTByNTYwVmhxMkJoRkh6SnhWbVRXOXZTUkxaNGtCa0xBbkFYdklYQU9odUt3NwotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg=="
---
# Source: hlf-ordnode/templates/secret--ordererorg-cacert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orderer3-cacert
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
type: Opaque
data:
  cacert.pem: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNRRENDQWVXZ0F3SUJBZ0lRQXhOdXNyS1AraU5YL2x2c01WOVpxREFLQmdncWhrak9QUVFEQWpCcU1Rc3cKQ1FZRFZRUUdFd0pGVXpFUk1BOEdBMVVFQnhNSVFXeHBZMkZ1ZEdVeEVUQVBCZ05WQkFrVENFRnNhV05oYm5SbApNUmt3RndZRFZRUUtFeEJMZFc1bklFWjFJRk52Wm5SM1lYSmxNUTB3Q3dZRFZRUUxFd1JVWldOb01Rc3dDUVlEClZRUURFd0pqWVRBZUZ3MHlNekV4TURjd056QTRNVEZhRncwek16RXhNRGd3TnpBNE1URmFNR294Q3pBSkJnTlYKQkFZVEFrVlRNUkV3RHdZRFZRUUhFd2hCYkdsallXNTBaVEVSTUE4R0ExVUVDUk1JUVd4cFkyRnVkR1V4R1RBWApCZ05WQkFvVEVFdDFibWNnUm5VZ1UyOW1kSGRoY21VeERUQUxCZ05WQkFzVEJGUmxZMmd4Q3pBSkJnTlZCQU1UCkFtTmhNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUV3dENxOENsMXlyaDQ3c1JXR1VKNmRTVHMKRTBBZytOUHhpNTZtVkUyTWIyUUxjUVBPd054OURBUVhrb3RRRUpFeDQ2RUhPdk80RVFkd2w1UG5vUXJWZWFOdApNR3N3RGdZRFZSMFBBUUgvQkFRREFnR21NQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNECkFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Da0dBMVVkRGdRaUJDQUJaMlNMNEVjUEJPbkhnMTB2NUhUcHQxRXUKcXplYVhHc0doczlta09LVGdEQUtCZ2dxaGtqT1BRUURBZ05KQURCR0FpRUF6bjZGVnhMbUxSdFI2RGpWYWtJTwpBS0xERHNuZmEraDJUSG14ekl0Z2FHVUNJUUNJaFJyVWU0QnNrYmZ1cEZjTDBHWThDbDB6cDNOb0tBaUZ0bGFaClg5M2NnQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
---
# Source: hlf-ordnode/templates/secret--ordererorg-tlsrootcert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orderer3-tlsrootcert
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
type: Opaque
data:
  cacert.pem: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNSakNDQWV5Z0F3SUJBZ0lSQU0vYmJDN1k2bFIyMU8rekJseENJTHN3Q2dZSUtvWkl6ajBFQXdJd2JURUwKTUFrR0ExVUVCaE1DUlZNeEVUQVBCZ05WQkFjVENFRnNhV05oYm5SbE1SRXdEd1lEVlFRSkV3aEJiR2xqWVc1MApaVEVaTUJjR0ExVUVDaE1RUzNWdVp5QkdkU0JUYjJaMGQyRnlaVEVOTUFzR0ExVUVDeE1FVkdWamFERU9NQXdHCkExVUVBeE1GZEd4elkyRXdIaGNOTWpNeE1UQTNNRGN3T0RFeFdoY05Nek14TVRBNE1EY3dPREV4V2pCdE1Rc3cKQ1FZRFZRUUdFd0pGVXpFUk1BOEdBMVVFQnhNSVFXeHBZMkZ1ZEdVeEVUQVBCZ05WQkFrVENFRnNhV05oYm5SbApNUmt3RndZRFZRUUtFeEJMZFc1bklFWjFJRk52Wm5SM1lYSmxNUTB3Q3dZRFZRUUxFd1JVWldOb01RNHdEQVlEClZRUURFd1YwYkhOallUQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJLd0Q5RWdsQlpwVU1STVIKYWl6RzYxOXEyaXBHV3hmcUNGVnRjN3FUY3FSL1MrbHZ4WHVSR2VZOGVPczkvUzVmTUF6aWxWUi9kZjhZOFV4KwpiQlBIK1JDamJUQnJNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBZ1lJCkt3WUJCUVVIQXdFd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBcEJnTlZIUTRFSWdRZ2g4aytwbnJ5Y3NkenZCbVAKVy9hbFNkblZjYks4MGZ3QlFCeVJaY0VhL2Rvd0NnWUlLb1pJemowRUF3SURTQUF3UlFJZ1ltWFVSenRBcGx3dQp1MG5ITVorU281Y0ZzemxJSGNjUFNmYnpySEhiMDNVQ0lRQ3U4eFltMXI5YjFPT2VpZGZRS3ZWdHVZSmk3K3o4CmlJeWFLQzFsNGplZFFBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: hlf-ordnode/templates/secret--peerorg-tlsrootcert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orderer3-peer-tlsrootcert
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
type: Opaque
data:
---
# Source: hlf-ordnode/templates/secret--tx-genesis.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orderer3--genesis
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
type: Opaque
data:
  # genesis is already base64
  genesis.block: ""
---
# Source: hlf-ordnode/templates/config-ou.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer3-nodeou
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
data:
  config.yaml: |
    NodeOUs:
      Enable: true
      ClientOUIdentifier:
        Certificate: cacerts/cacert.pem
        OrganizationalUnitIdentifier: client
      PeerOUIdentifier:
        Certificate: cacerts/cacert.pem
        OrganizationalUnitIdentifier: peer
      AdminOUIdentifier:
        Certificate: cacerts/cacert.pem
        OrganizationalUnitIdentifier: admin
      OrdererOUIdentifier:
        Certificate: cacerts/cacert.pem
        OrganizationalUnitIdentifier: orderer
---
# Source: hlf-ordnode/templates/configmap--ord--core.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer3--orderer--core
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
data:
  orderer.yaml: |
    # Copyright IBM Corp. All Rights Reserved.
    #
    # SPDX-License-Identifier: Apache-2.0
    #

    ---
    ################################################################################
    #
    #   Orderer Configuration
    #
    #   - This controls the type and configuration of the orderer.
    #
    ################################################################################
    General:
      # Listen address: The IP on which to bind to listen.
      ListenAddress: 127.0.0.1

      # Listen port: The port on which to bind to listen.
      ListenPort: 7050

      # TLS: TLS settings for the GRPC server.
      TLS:
        # Require server-side TLS
        Enabled: false
        # PrivateKey governs the file location of the private key of the TLS certificate.
        PrivateKey: tls/server.key
        # Certificate governs the file location of the server TLS certificate.
        Certificate: tls/server.crt
        # RootCAs contains a list of additional root certificates used for verifying certificates
        # of other orderer nodes during outbound connections.
        # It is not required to be set, but can be used to augment the set of TLS CA certificates
        # available from the MSPs of each channel’s configuration.
        RootCAs:
          - tls/ca.crt
        # Require client certificates / mutual TLS for inbound connections.
        ClientAuthRequired: false
        # If mutual TLS is enabled, ClientRootCAs contains a list of additional root certificates
        # used for verifying certificates of client connections.
        # It is not required to be set, but can be used to augment the set of TLS CA certificates
        # available from the MSPs of each channel’s configuration.
        ClientRootCAs:
      # Keepalive settings for the GRPC server.
      Keepalive:
        # ServerMinInterval is the minimum permitted time between client pings.
        # If clients send pings more frequently, the server will
        # disconnect them.
        ServerMinInterval: 60s
        # ServerInterval is the time between pings to clients.
        ServerInterval: 7200s
        # ServerTimeout is the duration the server waits for a response from
        # a client before closing the connection.
        ServerTimeout: 20s

      # Since all nodes should be consistent it is recommended to keep
      # the default value of 100MB for MaxRecvMsgSize & MaxSendMsgSize
      # Max message size in bytes the GRPC server and client can receive
      MaxRecvMsgSize: 104857600
      # Max message size in bytes the GRPC server and client can send
      MaxSendMsgSize: 104857600

      # Cluster settings for ordering service nodes that communicate with other ordering service nodes
      # such as Raft based ordering service.
      Cluster:
        # SendBufferSize is the maximum number of messages in the egress buffer.
        # Consensus messages are dropped if the buffer is full, and transaction
        # messages are waiting for space to be freed.
        SendBufferSize: 100

        # ClientCertificate governs the file location of the client TLS certificate
        # used to establish mutual TLS connections with other ordering service nodes.
        # If not set, the server General.TLS.Certificate is re-used.
        ClientCertificate:
        # ClientPrivateKey governs the file location of the private key of the client TLS certificate.
        # If not set, the server General.TLS.PrivateKey is re-used.
        ClientPrivateKey:

        # The below 4 properties should be either set together, or be unset together.
        # If they are set, then the orderer node uses a separate listener for intra-cluster
        # communication. If they are unset, then the general orderer listener is used.
        # This is useful if you want to use a different TLS server certificates on the
        # client-facing and the intra-cluster listeners.

        # ListenPort defines the port on which the cluster listens to connections.
        ListenPort:
        # ListenAddress defines the IP on which to listen to intra-cluster communication.
        ListenAddress:
        # ServerCertificate defines the file location of the server TLS certificate used for intra-cluster
        # communication.
        ServerCertificate:
        # ServerPrivateKey defines the file location of the private key of the TLS certificate.
        ServerPrivateKey:

      # Bootstrap method: The method by which to obtain the bootstrap block
      # system channel is specified. The option can be one of:
      #   "file" - path to a file containing the genesis block or config block of system channel
      #   "none" - allows an orderer to start without a system channel configuration
      BootstrapMethod: file

      # Bootstrap file: The file containing the bootstrap block to use when
      # initializing the orderer system channel and BootstrapMethod is set to
      # "file".  The bootstrap file can be the genesis block, and it can also be
      # a config block for late bootstrap of some consensus methods like Raft.
      # Generate a genesis block by updating $FABRIC_CFG_PATH/configtx.yaml and
      # using configtxgen command with "-outputBlock" option.
      # Defaults to file "genesisblock" (in $FABRIC_CFG_PATH directory) if not specified.
      BootstrapFile:

      # LocalMSPDir is where to find the private crypto material needed by the
      # orderer. It is set relative here as a default for dev environments but
      # should be changed to the real location in production.
      LocalMSPDir: msp

      # LocalMSPID is the identity to register the local MSP material with the MSP
      # manager. IMPORTANT: The local MSP ID of an orderer needs to match the MSP
      # ID of one of the organizations defined in the orderer system channel's
      # /Channel/Orderer configuration. The sample organization defined in the
      # sample configuration provided has an MSP ID of "SampleOrg".
      LocalMSPID: SampleOrg

      # Enable an HTTP service for Go "pprof" profiling as documented at:
      # https://golang.org/pkg/net/http/pprof
      Profile:
        Enabled: false
        Address: 0.0.0.0:6060

      # BCCSP configures the blockchain crypto service providers.
      BCCSP:
        # Default specifies the preferred blockchain crypto service provider
        # to use. If the preferred provider is not available, the software
        # based provider ("SW") will be used.
        # Valid providers are:
        #  - SW: a software based crypto provider
        #  - PKCS11: a CA hardware security module crypto provider.
        Default: SW

        # SW configures the software based blockchain crypto provider.
        SW:
          # TODO: The default Hash and Security level needs refactoring to be
          # fully configurable. Changing these defaults requires coordination
          # SHA2 is hardcoded in several places, not only BCCSP
          Hash: SHA2
          Security: 256
          # Location of key store. If this is unset, a location will be
          # chosen using: 'LocalMSPDir'/keystore
          FileKeyStore:
            KeyStore:

        # Settings for the PKCS#11 crypto provider (i.e. when DEFAULT: PKCS11)
        PKCS11:
          # Location of the PKCS11 module library
          Library:
          # Token Label
          Label:
          # User PIN
          Pin:
          Hash:
          Security:
          FileKeyStore:
            KeyStore:

      # Authentication contains configuration parameters related to authenticating
      # client messages
      Authentication:
        # the acceptable difference between the current server time and the
        # client's time as specified in a client request message
        TimeWindow: 15m


    ################################################################################
    #
    #   SECTION: File Ledger
    #
    #   - This section applies to the configuration of the file ledger.
    #
    ################################################################################
    FileLedger:

      # Location: The directory to store the blocks in.
      Location: /var/hyperledger/production/orderer

    ################################################################################
    #
    #   Debug Configuration
    #
    #   - This controls the debugging options for the orderer
    #
    ################################################################################
    Debug:

      # BroadcastTraceDir when set will cause each request to the Broadcast service
      # for this orderer to be written to a file in this directory
      BroadcastTraceDir:

      # DeliverTraceDir when set will cause each request to the Deliver service
      # for this orderer to be written to a file in this directory
      DeliverTraceDir:

    ################################################################################
    #
    #   Operations Configuration
    #
    #   - This configures the operations server endpoint for the orderer
    #
    ################################################################################
    Operations:
      # host and port for the operations server
      ListenAddress: 127.0.0.1:8443

      # TLS configuration for the operations endpoint
      TLS:
        # TLS enabled
        Enabled: false

        # Certificate is the location of the PEM encoded TLS certificate
        Certificate:

        # PrivateKey points to the location of the PEM-encoded key
        PrivateKey:

        # Most operations service endpoints require client authentication when TLS
        # is enabled. ClientAuthRequired requires client certificate authentication
        # at the TLS layer to access all resources.
        ClientAuthRequired: false

        # Paths to PEM encoded ca certificates to trust for client authentication
        ClientRootCAs: []

    ################################################################################
    #
    #   Metrics Configuration
    #
    #   - This configures metrics collection for the orderer
    #
    ################################################################################
    Metrics:
      # The metrics provider is one of statsd, prometheus, or disabled
      Provider: disabled

      # The statsd configuration
      Statsd:
        # network type: tcp or udp
        Network: udp

        # the statsd server address
        Address: 127.0.0.1:8125

        # The interval at which locally cached counters and gauges are pushed
        # to statsd; timings are pushed immediately
        WriteInterval: 30s

        # The prefix is prepended to all emitted statsd metrics
        Prefix:

    ################################################################################
    #
    #   Admin Configuration
    #
    #   - This configures the admin server endpoint for the orderer
    #
    ################################################################################
    Admin:
      # host and port for the admin server
      ListenAddress: 127.0.0.1:9443

      # TLS configuration for the admin endpoint
      TLS:
        # TLS enabled
        Enabled: false

        # Certificate is the location of the PEM encoded TLS certificate
        Certificate:

        # PrivateKey points to the location of the PEM-encoded key
        PrivateKey:

        # Most admin service endpoints require client authentication when TLS
        # is enabled. ClientAuthRequired requires client certificate authentication
        # at the TLS layer to access all resources.
        #
        # NOTE: When TLS is enabled, the admin endpoint requires mutual TLS. The
        # orderer will panic on startup if this value is set to false.
        ClientAuthRequired: true

        # Paths to PEM encoded ca certificates to trust for client authentication
        ClientRootCAs: []

    ################################################################################
    #
    #   Channel participation API Configuration
    #
    #   - This provides the channel participation API configuration for the orderer.
    #   - Channel participation uses the ListenAddress and TLS settings of the Admin
    #     service.
    #
    ################################################################################
    ChannelParticipation:
      # Channel participation API is enabled.
      Enabled: false

      # The maximum size of the request body when joining a channel.
      MaxRequestBodySize: 1 MB


    ################################################################################
    #
    #   Consensus Configuration
    #
    #   - This section contains config options for a consensus plugin. It is opaque
    #     to orderer, and completely up to consensus implementation to make use of.
    #
    ################################################################################
    Consensus:
      # The allowed key-value pairs here depend on consensus plugin. For etcd/raft,
      # we use following options:

      # WALDir specifies the location at which Write Ahead Logs for etcd/raft are
      # stored. Each channel will have its own subdir named after channel ID.
      WALDir: /var/hyperledger/production/orderer/etcdraft/wal

      # SnapDir specifies the location at which snapshots for etcd/raft are
      # stored. Each channel will have its own subdir named after channel ID.
      SnapDir: /var/hyperledger/production/orderer/etcdraft/snapshot
---
# Source: hlf-ordnode/templates/configmap--ord.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderer3--ord
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
data:
  ## Location where fabric-ca-client configuration is saved
  FABRIC_CA_CLIENT_HOME: /var/hyperledger/fabric-ca-client
  ## Orderer defaults
  FABRIC_CFG_PATH: /var/hyperledger/fabric/config
  ORDERER_GENERAL_LEDGERTYPE: file
  ORDERER_FILELEDGER_LOCATION: /var/hyperledger/ledger
  ORDERER_GENERAL_BATCHTIMEOUT: 1s
  ORDERER_GENERAL_BATCHSIZE_MAXMESSAGECOUNT: "10"
  ORDERER_GENERAL_MAXWINDOWSIZE: "1000"
  ORDERER_GENERAL_ORDERERTYPE: "etcdraft"
  ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
  ORDERER_GENERAL_LISTENPORT: "7050"
  ORDERER_GENERAL_LOGLEVEL: info
  ORDERER_GENERAL_LOCALMSPDIR: /var/hyperledger/msp
  ORDERER_GENERAL_LOCALMSPID: "ericssonMSP"
  ORDERER_GENERAL_BOOTSTRAPMETHOD: none
  ORDERER_GENERAL_GENESISFILE: /hl_config/genesis/genesis.block
  ORDERER_GENERAL_GENESISPROFILE: initial
  ORDERER_GENERAL_TLS_ENABLED: "true"
  ORDERER_GENERAL_TLS_CERTIFICATE: "/var/hyperledger/tls/server/pair/tls.crt"
  ORDERER_GENERAL_TLS_PRIVATEKEY: "/var/hyperledger/tls/server/pair/tls.key"
  ORDERER_GENERAL_TLS_ROOTCAS: "/var/hyperledger/tls/server/cert/cacert.pem"
  ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED: "false"
  # see: https://lists.hyperledger.org/g/fabric/topic/31696729
  ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE: "/var/hyperledger/tls/server/pair/tls.crt"
  ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY: "/var/hyperledger/tls/server/pair/tls.key"
  ORDERER_GENERAL_CLUSTER_ROOTCAS: "/var/hyperledger/tls/server/cert/cacert.pem"
  # This is fixed prior to starting the orderer
  ORDERER_GENERAL_TLS_CLIENTROOTCAS: "/var/hyperledger/tls/client/cert/*"

  # Admin API

  ORDERER_CHANNELPARTICIPATION_ENABLED: "true"
  ORDERER_ADMIN_TLS_ENABLED: "true"
  ORDERER_ADMIN_TLS_CERTIFICATE: "/var/hyperledger/admin/tls.crt"
  ORDERER_ADMIN_TLS_PRIVATEKEY: "/var/hyperledger/admin/tls.key"
  ORDERER_ADMIN_TLS_ROOTCAS: "[/var/hyperledger/admin/cacert.crt]"
  ORDERER_ADMIN_TLS_CLIENTROOTCAS: "[/var/hyperledger/admin/clientcacert.crt]"
  ORDERER_ADMIN_LISTENADDRESS: "0.0.0.0:7053"

  GODEBUG: "netdns=go"
  ADMIN_MSP_PATH: /var/hyperledger/admin_msp
  FABRIC_LOGGING_SPEC: info
  ##############
  # Metrics #
  ##############
  ORDERER_METRICS_PROVIDER: "prometheus"
  ##############
  # Operations #
  ##############
  ORDERER_OPERATIONS_TLS_ENABLED: "false"
  ORDERER_OPERATIONS_LISTENADDRESS: "0.0.0.0:9444"
---
# Source: hlf-ordnode/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: orderer3
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "2Gi"
  storageClassName: "ericsson-azure-storageclass"
---
# Source: hlf-ordnode/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: orderer3
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
spec:
  type: ClusterIP
  ports:
    - port: 7050
      targetPort: 7050
      protocol: TCP
      name: grpc
    - port: 7053
      targetPort: 7053
      protocol: TCP
      name: admin
    - port: 9443
      targetPort: 9444
      protocol: TCP
      name: operations
  selector:
    app: hlf-ordnode
    release: orderer3
---
# Source: hlf-ordnode/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderer3
  labels:
    app: hlf-ordnode
    heritage: "Helm"
    release: "orderer3"
    chart: hlf-ordnode-1.4.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hlf-ordnode
      release: orderer3
  # Ensure we allow our pod to be unavailable, so we can upgrade
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        checksum/configmap--ord: 363ebb8b73fb950f3b6cffdcdf96c7466e23b88f97f74b354a08caa9e38f
        checksum/configmap--ord--core: 2dfb4e71f3d5c1660a88293feea6322e5b118f23fa92b511bb148e51f341
        checksum/config-ou: a3760001c087e946073c1831e3ad33d2266d2139e6f1347b7bdb42ff4e6c
        checksum/secret--orderer0-admin: afe3641ac772e30aeaee0713d2d74a7fb4053d9b82aedb33eeebf31a76e1
        checksum/secret--orderer0-idcert: 552f0348e24bbca012b022f9c1b47fc04c8a6f9378d2675cf4a2f2dc2db4
        checksum/secret--orderer0-idkey: edf1bc5300142b41e1a3048f4150ee709320cffeeea353b24efe8b5fb8a6
        checksum/secret--orderer0-tls: 811f8376fd84745a00ddf1e64d201030bbcdd2c173b7e043fb0c034db2cf
        checksum/secret--ordererorg-cacert: 17c60c2f599381099d13e492d64cfe125ca766a8a191d207ef01ae22a629
        checksum/secret--ordererorg-tlsrootcert: 07db48e6332a4873e8faee41db32e5a4662843b1e76b4190b6424d0ba7d0
        app: hlf-ordnode
        heritage: "Helm"
        release: "orderer3"
        chart: hlf-ordnode-1.4.0
    spec:
      hostAliases:
          null
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: orderer3
        - name: id-cert
          secret:
            secretName: orderer3-idcert
        - name: id-key
          secret:
            secretName: orderer3-idkey
        - name: cacert
          secret:
            secretName: orderer3-cacert
        - name: tls
          secret:
            secretName: orderer3-tls
        - name: tls-rootcert
          secret:
            secretName: orderer3-tlsrootcert
        - name: tls-clientrootcert
          secret:
            secretName: orderer3-peer-tlsrootcert
        - name: genesis
          secret:
            secretName: orderer3--genesis
        - name: admin
          secret:
            secretName: orderer3-admin

        - name: nodeou
          configMap:
            name: 'orderer3-nodeou'
            items:
              - key: 'config.yaml'
                path: 'config.yaml'
        - name: config
          configMap:
            name: 'orderer3--orderer--core'
            items:
              - key: 'orderer.yaml'
                path: 'orderer.yaml'
      containers:

        - name: orderer
          image: "hyperledger/fabric-orderer:2.5.3"
          imagePullPolicy: Always
          ports:
            - name: ord-port
              containerPort: 7050
              protocol: TCP
            - name: ord-operations
              containerPort: 9444
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9444
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 9444
            initialDelaySeconds: 15
          command:
            - sh
            - -c
            - |

              while [ ! -d /hl_config/genesis ] || [ -z "$(ls -A /hl_config/genesis)" ];
              do
                echo "\033[0;31m /hl_config/genesis must contain Genesis transaction \033[0m"
                sleep 60
              done

              while [ ! -d ${ORDERER_GENERAL_LOCALMSPDIR}/signcerts ];
              do
                echo "\033[0;31m ${ORDERER_GENERAL_LOCALMSPDIR}/signcerts directory must exist \033[0m"
                sleep 60
              done
              mkdir -p /var/hyperledger/msp/admincerts

              echo "\033[0;32m Create ${ORDERER_FILELEDGER_LOCATION} directory to avoid restarts \033[0m"
              mkdir -p ${ORDERER_FILELEDGER_LOCATION}
              mkdir -p ${ORDERER_FILELEDGER_LOCATION}/index

              if [ $ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED ]
              then
                export ORDERER_GENERAL_TLS_CLIENTROOTCAS=$(echo $(ls $ORDERER_GENERAL_TLS_CLIENTROOTCAS) | echo "[$(sed 's/ /,/g')]")
              fi

              echo ">\033[0;35m orderer \033[0m"
              orderer
          envFrom:
            - configMapRef:
                name: orderer3--ord
          volumeMounts:
            - mountPath: /var/hyperledger
              name: data
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/fabric/config
              name: config

            - mountPath: /var/hyperledger/msp/config.yaml
              name: nodeou
              subPath: config.yaml

            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /hl_config/genesis
              name: genesis
            - mountPath: /var/hyperledger/admin
              name: admin

          resources:
            limits:
              cpu: "0"
              memory: "0"
            requests:
              cpu: "0"
              memory: "0"
---
# Source: hlf-ordnode/templates/istio-gateway.yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: orderer3-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 443
        name: tcp
        protocol: TLS
      tls:
        mode: PASSTHROUGH
      hosts:
          - orderer3.org1proxy.phoenixblockchain.com
---
# Source: hlf-ordnode/templates/istio-virtualservice.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: orderer3-virtualservice
spec:
  hosts:
    - orderer3.org1proxy.phoenixblockchain.com
  gateways:
    - orderer3-gateway
  tls:
    - match:
        - port: 443
          sniHosts:
              - orderer3.org1proxy.phoenixblockchain.com
      route:
        - destination:
            host: orderer3
            port:
              number: 7050

